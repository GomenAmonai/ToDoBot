import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
)
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext,
    CallbackQueryHandler, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import sqlite3
import pytz
import traceback

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CHOOSING, ADD_TASK_TOPIC, ADD_TASK_ATTACHMENTS, ADD_TASK_DONE,
    TYPING_TIME, CONFIRMING, SELECT_DAY, SELECT_TIME_OF_DAY,
    SET_SCHEDULE_HOUR, SAVE_SCHEDULE, RESET_SCHEDULE,
    QUICK_NOTE, QUICK_NOTE_CONFIRM, QUICK_NOTE_TIME,
    SETTINGS, SET_NOTIFICATION_TIME,
    SUBSCRIPTIONS, SUBSCRIPTION_CATEGORY, VIEW_SUBSCRIPTION,
    ADD_SUBSCRIPTION
) = range(20)

# –£–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    topic TEXT,
    description TEXT,
    attachments TEXT,
    time TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS schedules (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    day TEXT,
    time_of_day TEXT,
    hour INTEGER,
    task TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS subscriptions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    content TEXT
)
''')

conn.commit()

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.start()

# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –≤–∞—à chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
ADMIN_CHAT_ID = 6698369098  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id

# –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ –º–∏–Ω—É—Ç–∞—Ö)
DEFAULT_NOTIFICATION_TIME = 5

def error_handler(update: object, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏."""
    logger.error(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = ''.join(tb_list)

    message = (
        f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n"
        f"{context.error}\n\n"
        f"–¢—Ä–µ–π—Å–±–µ–∫:\n"
        f"{tb_string}"
    )

    if ADMIN_CHAT_ID:
        try:
            context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    context.user_data['user_id'] = chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    main_menu(update, context)
    return CHOOSING

def main_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='main_add_task')],
        [InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data='main_weekly_schedule')],
        [InlineKeyboardButton('üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞', callback_data='main_quick_note')],
        [InlineKeyboardButton('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='main_settings')],
        [InlineKeyboardButton('üìå –ü–æ–¥–ø–∏—Å–∫–∏', callback_data='main_subscriptions')],
        [InlineKeyboardButton('üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data='main_my_tasks')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = 'üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ To-Do –±–æ—Ç!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    try:
        if update.callback_query:
            query = update.callback_query
            query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    return CHOOSING

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ callback_data: {data}")
    query.answer()

    if data == 'main_add_task':
        context.user_data['previous_menu'] = 'main_menu'
        try:
            query.edit_message_text('üìå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ø–∏–∫ –∑–∞–¥–∞—á–∏.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            query.message.reply_text('üìå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ø–∏–∫ –∑–∞–¥–∞—á–∏.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        return ADD_TASK_TOPIC

    elif data == 'main_my_tasks':
        context.user_data['previous_menu'] = 'main_menu'
        return my_tasks(update, context)

    elif data == 'main_weekly_schedule':
        context.user_data['previous_menu'] = 'main_menu'
        return manage_schedule(update, context)

    elif data == 'main_quick_note':
        context.user_data['previous_menu'] = 'main_menu'
        try:
            query.edit_message_text('üìù <b>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞:</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏: {e}")
            query.message.reply_text('üìù <b>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞:</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        return QUICK_NOTE

    elif data == 'main_settings':
        return settings_menu(update, context)

    elif data == 'main_subscriptions':
        return subscriptions_menu(update, context)

    elif data == 'main_my_tasks':
        return my_tasks(update, context)

    elif data == 'back':
        return main_menu(update, context)

    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data: {data}")
        return CHOOSING

def add_task_topic(update: Update, context: CallbackContext):
    topic = update.message.text
    context.user_data['task_topic'] = topic
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ–ø–∏–∫ –∑–∞–¥–∞—á–∏: {topic}")
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data='attach_yes'),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='attach_no')
        ],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ —Ñ–∞–π–ª—ã, —Å—Å—ã–ª–∫–∏, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ?', reply_markup=reply_markup)
    return ADD_TASK_ATTACHMENTS

def add_task_attachments_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {data}")
    query.answer()

    if data == 'attach_yes':
        try:
            query.edit_message_text('üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –∑–∞–¥–∞—á–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ".', reply_markup=done_button(), parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            query.message.reply_text('üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –∑–∞–¥–∞—á–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ".', reply_markup=done_button(), parse_mode=ParseMode.HTML)
        context.user_data['attachments'] = []
        return ADD_TASK_ATTACHMENTS
    elif data == 'attach_no':
        context.user_data['attachments'] = []
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
        try:
            query.edit_message_text(
                'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏: {e}")
            query.message.reply_text(
                'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
        return TYPING_TIME
    elif data == 'back':
        return add_task_topic(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback_data –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è—Ö: {data}")
        return ADD_TASK_ATTACHMENTS

def add_task_done(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
    try:
        query.edit_message_text(
            'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
            parse_mode=ParseMode.HTML,
            reply_markup=back_button()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π: {e}")
        query.message.reply_text(
            'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
            parse_mode=ParseMode.HTML,
            reply_markup=back_button()
        )
    return TYPING_TIME

    # ... –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ ...

def back_button():
    keyboard = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]]
    return InlineKeyboardMarkup(keyboard)

def done_button():
    keyboard = [[InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='done')]]
    return InlineKeyboardMarkup(keyboard)

def add_task_attachments_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {data}")
    query.answer()

    if data == 'attach_yes':
        try:
            query.edit_message_text('üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –∑–∞–¥–∞—á–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ".', reply_markup=done_button(), parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            query.message.reply_text('üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –∑–∞–¥–∞—á–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ".', reply_markup=done_button(), parse_mode=ParseMode.HTML)
        context.user_data['attachments'] = []
        return ADD_TASK_ATTACHMENTS
    elif data == 'attach_no' or data == 'done':
        context.user_data['attachments'] = context.user_data.get('attachments', [])
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
        try:
            query.edit_message_text(
                'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏: {e}")
            query.message.reply_text(
                'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
        return TYPING_TIME
    elif data == 'back':
        return add_task_topic(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ callback_data –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è—Ö: {data}")
        return ADD_TASK_ATTACHMENTS

def received_task_attachment(update: Update, context: CallbackContext):
    user_input = update.message

    if user_input.text and user_input.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        update.message.reply_text('üìå –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏.', reply_markup=back_button())
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
        update.message.reply_text(
            'üïí –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
            parse_mode=ParseMode.HTML,
            reply_markup=back_button()
        )
        return TYPING_TIME

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π
    attachment = None
    if user_input.document:
        attachment = f'üìÑ –§–∞–π–ª: {user_input.document.file_name}'
    elif user_input.photo:
        attachment = 'üñºÔ∏è –§–æ—Ç–æ'
    elif user_input.video:
        attachment = 'üìπ –í–∏–¥–µ–æ'
    elif user_input.text and user_input.entities:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
        for entity in user_input.entities:
            if entity.type == 'url':
                attachment = f'üîó –°—Å—ã–ª–∫–∞: {user_input.text[entity.offset:entity.offset + entity.length]}'
                break
    elif user_input.text:
        attachment = user_input.text

    if attachment:
        context.user_data['attachments'].append(attachment)
        update.message.reply_text(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {attachment}', reply_markup=done_button())
    else:
        update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=done_button())

    return ADD_TASK_ATTACHMENTS

# ... –≤–∞—à –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ ...

def received_time(update: Update, context: CallbackContext):
    input_time = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏: {input_time}")
    try:
        task_time = parse_time(input_time)
        if not task_time:
            update.message.reply_text(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code>',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
            return TYPING_TIME

        context.user_data['task_time'] = task_time
        attachments = context.user_data.get('attachments', [])

        task_info = f"üìù <b>–¢–æ–ø–∏–∫:</b> {context.user_data['task_topic']}\n‚è∞ <b>–í—Ä–µ–º—è:</b> {task_time.strftime('%Y-%m-%d %H:%M')}"
        if attachments:
            task_info += "\nüìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n" + "\n".join(attachments)

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data='conf_confirm_yes'),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='conf_confirm_no')
            ],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='conf_back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        update.message.reply_text(
            f'üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n{task_info}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
        return CONFIRMING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        update.message.reply_text(
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_markup=back_button()
        )
        return TYPING_TIME

def parse_time(input_time):
    now = datetime.now(TIMEZONE)
    try:
        if len(input_time) == 5:  # –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
            task_time = datetime.strptime(input_time, '%H:%M').replace(
                year=now.year,
                month=now.month,
                day=now.day
            )
            task_time = TIMEZONE.localize(task_time)
            if task_time < now:
                task_time += timedelta(days=1)
            logger.info(f"Parsed time (–ß–ß:–ú–ú): {task_time}")
        elif len(input_time) == 16:  # –§–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú
            task_time = datetime.strptime(input_time, '%Y-%m-%d %H:%M')
            task_time = TIMEZONE.localize(task_time)
            logger.info(f"Parsed time (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú): {task_time}")
        else:
            logger.warning("–í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.")
            return None
        return task_time
    except ValueError:
        logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏.")
        return None

def confirm_task(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {data}")
    query.answer()

    if data == 'conf_confirm_yes':
        user_id = context.user_data.get('user_id')
        topic = context.user_data.get('task_topic')
        time = context.user_data.get('task_time')
        attachments = context.user_data.get('attachments', [])

        if topic and time:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('INSERT INTO tasks (user_id, topic, description, attachments, time) VALUES (?, ?, ?, ?, ?)',
                           (user_id, topic, '', '; '.join(attachments), time.strftime('%Y-%m-%d %H:%M')))
            conn.commit()

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            notification_time = context.user_data.get('notification_time', DEFAULT_NOTIFICATION_TIME)
            schedule_notification(user_id, topic, time, notification_time, attachments)

            try:
                query.edit_message_text('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è.')
                logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
                query.message.reply_text('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è.')

            return main_menu(update, context)

        else:
            try:
                query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.')
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
                query.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.')
            return main_menu(update, context)

    elif data == 'conf_confirm_no':
        try:
            query.edit_message_text('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=back_button())
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏: {e}")
            query.message.reply_text('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=back_button())
        return main_menu(update, context)

    elif data == 'conf_back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        try:
            query.edit_message_text(
                'üïí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
            logger.info("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏: {e}")
            query.message.reply_text(
                'üïí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
        return TYPING_TIME

    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {data}")
        return CONFIRMING

def manage_schedule(update: Update, context: CallbackContext):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Å–±—Ä–æ—Å."""
    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_add')],
        [InlineKeyboardButton('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_reset')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        if update.callback_query:
            query = update.callback_query
            query.edit_message_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {e}")
        if update.callback_query:
            update.callback_query.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SELECT_DAY

def schedule_reset(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')
    cursor.execute('DELETE FROM schedules WHERE user_id = ?', (user_id,))
    conn.commit()
    try:
        query.edit_message_text('üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        query.message.reply_text('üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
    return manage_schedule(update, context)

def schedule_add(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    keyboard = [
        [InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='schedule_Monday')],
        [InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫', callback_data='schedule_Tuesday')],
        [InlineKeyboardButton('–°—Ä–µ–¥–∞', callback_data='schedule_Wednesday')],
        [InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥', callback_data='schedule_Thursday')],
        [InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞', callback_data='schedule_Friday')],
        [InlineKeyboardButton('–°—É–±–±–æ—Ç–∞', callback_data='schedule_Saturday')],
        [InlineKeyboardButton('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', callback_data='schedule_Sunday')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        query.edit_message_text('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        query.message.reply_text('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SUBSCRIPTION_CATEGORY  # Reusing a state; better to define a new one if needed

def select_schedule_day(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    day = data.split('_')[1]  # 'schedule_Monday' -> 'Monday'
    context.user_data['schedule_day'] = day
    logger.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {day}")

    keyboard = [
        [InlineKeyboardButton('üåÖ –£—Ç—Ä–æ (6-12)', callback_data='schedule_time_Morning')],
        [InlineKeyboardButton('üåá –î–µ–Ω—å (12-18)', callback_data='schedule_time_Afternoon')],
        [InlineKeyboardButton('üåÉ –í–µ—á–µ—Ä (18-24)', callback_data='schedule_time_Evening')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        query.edit_message_text(f'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è {day}:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫: {e}")
        query.message.reply_text(f'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è {day}:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SELECT_TIME_OF_DAY

def select_schedule_time_of_day(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    time_of_day = data.split('_')[2]  # 'schedule_time_Morning' -> 'Morning'
    context.user_data['schedule_time_of_day'] = time_of_day
    logger.info(f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {time_of_day}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    time_ranges = {
        'Morning': (6, 12),
        'Afternoon': (12, 18),
        'Evening': (18, 24)
    }

    start_hour, end_hour = time_ranges.get(time_of_day, (6, 12))
    hours = list(range(start_hour, end_hour))  # –ù–∞–ø—Ä–∏–º–µ—Ä, 6-12 -> 6,7,...11

    context.user_data['schedule_hours'] = hours
    context.user_data['current_schedule_hour'] = 0
    context.user_data['schedule_tasks'] = {}

    if hours:
        current_hour = hours[0]
        context.user_data['current_schedule_hour'] = 0
        update.message.reply_text(f'üïí –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è {time_of_day} –≤ {current_hour}:00:')
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {time_of_day} –≤ {current_hour}:00")
        return SET_SCHEDULE_HOUR
    else:
        update.message.reply_text('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏.', reply_markup=back_button())
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏.")
        return manage_schedule(update, context)

def set_schedule_hour(update: Update, context: CallbackContext):
    task = update.message.text
    hour_index = context.user_data['current_schedule_hour']
    hours = context.user_data['schedule_hours']
    time_of_day = context.user_data['schedule_time_of_day']
    day = context.user_data['schedule_day']

    current_hour = hours[hour_index]
    context.user_data['schedule_tasks'][current_hour] = task
    logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è {day} {time_of_day} –≤ {current_hour}:00 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {task}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
    if hour_index + 1 < len(hours):
        context.user_data['current_schedule_hour'] += 1
        next_hour = hours[hour_index + 1]
        update.message.reply_text(f'üïí –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è {time_of_day} –≤ {next_hour}:00:')
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {time_of_day} –≤ {next_hour}:00")
        return SET_SCHEDULE_HOUR
    else:
        # –í—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω—ã
        keyboard = [
            [InlineKeyboardButton('‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_save')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text('üìÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –≤–≤–µ–¥–µ–Ω—ã. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return SAVE_SCHEDULE

def save_schedule(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')
    day = context.user_data.get('schedule_day')
    time_of_day = context.user_data.get('schedule_time_of_day')
    tasks = context.user_data.get('schedule_tasks', {})

    for hour, task in tasks.items():
        cursor.execute('INSERT INTO schedules (user_id, day, time_of_day, hour, task) VALUES (?, ?, ?, ?, ?)',
                       (user_id, day, time_of_day, hour, task))
    conn.commit()

    try:
        query.edit_message_text('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        query.message.reply_text('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.', reply_markup=back_button(), parse_mode=ParseMode.HTML)

    return manage_schedule(update, context)

def reset_schedule(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')
    cursor.execute('DELETE FROM schedules WHERE user_id = ?', (user_id,))
    conn.commit()
    try:
        query.edit_message_text('üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        query.message.reply_text('üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
    return manage_schedule(update, context)

def schedule_notification(chat_id, task, time, notification_time, attachments):
    notify_time = time - timedelta(minutes=notification_time)
    now = datetime.now(TIMEZONE)
    if notify_time < now:
        send_notification(chat_id, task, attachments)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–∑—É –¥–ª—è –∑–∞–¥–∞—á–∏ '{task}'.")
    else:
        try:
            job_id = f"notif_{chat_id}_{task}_{notify_time.timestamp()}"
            scheduler.add_job(
                send_notification,
                'date',
                run_date=notify_time,
                args=[chat_id, task, attachments],
                timezone=TIMEZONE,
                id=job_id
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task}' –Ω–∞ {notify_time}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def send_notification(chat_id, task, attachments):
    notification_text = f'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:</b>\nüìù {task}'
    if attachments:
        notification_text += '\n\nüìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n' + '\n'.join(attachments)
    try:
        updater.bot.send_message(chat_id=chat_id, text=notification_text, parse_mode=ParseMode.HTML)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def my_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')

    cursor.execute('SELECT topic, description, attachments, time FROM tasks WHERE user_id = ? ORDER BY time', (user_id,))
    tasks = cursor.fetchall()
    if tasks:
        message = 'üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n'
        for task in tasks:
            topic, description, attachments, time_str = task
            message += f"‚Ä¢ üìù <b>–¢–æ–ø–∏–∫:</b> {topic}\n  ‚è∞ <b>–í—Ä–µ–º—è:</b> {time_str}\n"
            if attachments:
                message += f"  üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è:</b> {attachments}\n"
            message += "\n"
    else:
        message = 'üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.'

    keyboard = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏: {e}")
        query.message.reply_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    return CHOOSING

def quick_note_handler(update: Update, context: CallbackContext):
    context.user_data['quick_note'] = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞: {update.message.text}")
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data='quick_confirm_yes'),
            InlineKeyboardButton("‚ùå –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='quick_confirm_no')
        ],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏?', reply_markup=reply_markup)
    return QUICK_NOTE_CONFIRM

def handle_quick_note_confirmation(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏: {data}")
    query.answer()

    if data == 'quick_confirm_yes':
        try:
            query.edit_message_text(
                'üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
            logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            query.message.reply_text(
                'üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code> –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã.',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
        return QUICK_NOTE_TIME

    elif data == 'quick_confirm_no':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_id = context.user_data.get('user_id')
        note = context.user_data.get('quick_note')
        cursor.execute('INSERT INTO tasks (user_id, topic, description, attachments, time) VALUES (?, ?, ?, ?, ?)',
                       (user_id, '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞', note, '', ''))
        conn.commit()
        try:
            query.edit_message_text('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
            logger.info("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            query.message.reply_text('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        return main_menu(update, context)

    elif data == 'back':
        try:
            query.edit_message_text('üìù <b>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞:</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
            logger.info("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∑–∞–º–µ—Ç–∫–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–≤–æ–¥—É –∑–∞–º–µ—Ç–∫–∏: {e}")
            query.message.reply_text('üìù <b>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞:</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É.', reply_markup=back_button(), parse_mode=ParseMode.HTML)
        return QUICK_NOTE

    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏: {data}")
        return QUICK_NOTE_CONFIRM

def quick_note_time_handler(update: Update, context: CallbackContext):
    input_time = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏: {input_time}")
    try:
        task_time = parse_time(input_time)
        if not task_time:
            update.message.reply_text(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code> –∏–ª–∏ <code>–ß–ß:–ú–ú</code>',
                parse_mode=ParseMode.HTML,
                reply_markup=back_button()
            )
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏.")
            return QUICK_NOTE_TIME

        context.user_data['quick_note_time'] = task_time
        note = context.user_data.get('quick_note')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = context.user_data.get('user_id')
        cursor.execute('INSERT INTO tasks (user_id, topic, description, attachments, time) VALUES (?, ?, ?, ?, ?)',
                       (user_id, '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞', note, '', task_time.strftime('%Y-%m-%d %H:%M')))
        conn.commit()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        notification_time = context.user_data.get('notification_time', DEFAULT_NOTIFICATION_TIME)
        schedule_notification(user_id, note, task_time, notification_time, [])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        try:
            update.message.reply_text('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º!', reply_markup=back_button(), parse_mode=ParseMode.HTML)
            logger.info("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: {e}")
            update.message.reply_text('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º!', reply_markup=back_button(), parse_mode=ParseMode.HTML)

        return main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏: {e}")
        update.message.reply_text(
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_markup=back_button()
        )
        return QUICK_NOTE_TIME

def settings_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton('‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data='set_notification_time')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    try:
        query.edit_message_text('üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        query.message.reply_text('üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SETTINGS

def set_notification_time(update: Update, context: CallbackContext):
    input_minutes = update.message.text
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {input_minutes} –º–∏–Ω—É—Ç")
    try:
        minutes = int(input_minutes)
        if minutes <= 0:
            raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        context.user_data['notification_time'] = minutes
        update.message.reply_text(f'‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç(—ã) –ø–µ—Ä–µ–¥ –∑–∞–¥–∞—á–µ–π.', reply_markup=back_button())
        logger.info(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {minutes} –º–∏–Ω—É—Ç")
        return settings_menu(update, context)
    except ValueError:
        update.message.reply_text('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.', reply_markup=back_button())
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return SET_NOTIFICATION_TIME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        update.message.reply_text('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=back_button())
        return SET_NOTIFICATION_TIME

def subscriptions_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')

    keyboard = [
        [InlineKeyboardButton('üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç', callback_data='subscription_Sport')],
        [InlineKeyboardButton('üìö –£—á–µ–±–∞', callback_data='subscription_Study')],
        [InlineKeyboardButton('üéâ –û—Ç–¥—ã—Ö', callback_data='subscription_Rest')],
        [InlineKeyboardButton('üíå –õ–∏—á–Ω–æ–µ', callback_data='subscription_Personal')],
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_subscription')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text('üìå <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        query.message.reply_text('üìå <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SUBSCRIPTION_CATEGORY

def subscription_category_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    category = data.split('_')[1]  # 'subscription_Sport' -> 'Sport'
    context.user_data['subscription_category'] = category
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {category}")

    keyboard = [
        [InlineKeyboardButton('üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫', callback_data='view_subscriptions')],
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_subscription')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text(f'üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        query.message.reply_text(f'üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return VIEW_SUBSCRIPTION

def view_subscriptions(update: Update, context: CallbackContext):
    query = update.callback_query
    category = context.user_data.get('subscription_category')
    user_id = context.user_data.get('user_id')

    cursor.execute('SELECT content FROM subscriptions WHERE user_id = ? AND category = ?', (user_id, category))
    subs = cursor.fetchall()
    if subs:
        message = f'üìå <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":</b>\n\n'
        for sub in subs:
            message += f"‚Ä¢ {sub[0]}\n"
    else:
        message = f'üìå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".'

    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_subscription')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        query.message.reply_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    return VIEW_SUBSCRIPTION

def add_subscription_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    if data == 'add_subscription':
        try:
            query.edit_message_text('üìå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=subscription_categories_buttons(), parse_mode=ParseMode.HTML)
            logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            query.message.reply_text('üìå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=subscription_categories_buttons(), parse_mode=ParseMode.HTML)
        return ADD_SUBSCRIPTION
    elif data.startswith('subscription_'):
        return subscription_category_handler(update, context)
    elif data == 'back':
        return subscriptions_menu(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
        return SUBSCRIPTION_CATEGORY

def subscription_categories_buttons():
    categories = ['Sport', 'Study', 'Rest', 'Personal']
    keyboard = [[InlineKeyboardButton(cat, callback_data=f'subscription_{cat}')] for cat in categories]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')])
    return InlineKeyboardMarkup(keyboard)

def add_subscription_entry(update: Update, context: CallbackContext):
    category = context.user_data.get('subscription_category')
    user_id = context.user_data.get('user_id')
    user_input = update.message

    if user_input.text:
        content = user_input.text
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {content}")
    elif user_input.caption:
        content = user_input.caption
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {content}")
    elif user_input.photo or user_input.video:
        content = '–ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç'
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
    else:
        update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=back_button())
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
        return ADD_SUBSCRIPTION

    cursor.execute('INSERT INTO subscriptions (user_id, category, content) VALUES (?, ?, ?)', (user_id, category, content))
    conn.commit()
    update.message.reply_text('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=back_button())
    logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    return subscriptions_menu(update, context)

def send_notification(chat_id, task, attachments):
    notification_text = f'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:</b>\nüìù {task}'
    if attachments:
        notification_text += '\n\nüìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n' + '\n'.join(attachments)
    try:
        updater.bot.send_message(chat_id=chat_id, text=notification_text, parse_mode=ParseMode.HTML)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def back_button():
    keyboard = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]]
    return InlineKeyboardMarkup(keyboard)

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text('üõë –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=back_button())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.chat_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.")
    return main_menu(update, context)

def manage_schedule(update: Update, context: CallbackContext):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Å–±—Ä–æ—Å."""
    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_add')],
        [InlineKeyboardButton('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_reset')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        if update.callback_query:
            query = update.callback_query
            query.edit_message_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {e}")
        if update.callback_query:
            update.callback_query.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SELECT_DAY

def subscriptions_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')

    keyboard = [
        [InlineKeyboardButton('üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç', callback_data='subscription_Sport')],
        [InlineKeyboardButton('üìö –£—á–µ–±–∞', callback_data='subscription_Study')],
        [InlineKeyboardButton('üéâ –û—Ç–¥—ã—Ö', callback_data='subscription_Rest')],
        [InlineKeyboardButton('üíå –õ–∏—á–Ω–æ–µ', callback_data='subscription_Personal')],
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_subscription')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text('üìå <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        query.message.reply_text('üìå <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SUBSCRIPTION_CATEGORY

def add_subscription(update: Update, context: CallbackContext):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ menu
    return add_subscription_handler(update, context)

def manage_schedule(update: Update, context: CallbackContext):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Å–±—Ä–æ—Å."""
    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_add')],
        [InlineKeyboardButton('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_reset')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        if update.callback_query:
            query = update.callback_query
            query.edit_message_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {e}")
        if update.callback_query:
            update.callback_query.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text('üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:</b>', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return SELECT_DAY

def ConversationHandler_states():
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ConversationHandler —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    return {
        CHOOSING: [
            CallbackQueryHandler(button_handler, pattern='^(main_add_task|main_weekly_schedule|main_quick_note|main_settings|main_subscriptions|main_my_tasks)$')
        ],
        ADD_TASK_TOPIC: [
            MessageHandler(Filters.text & ~Filters.command, add_task_topic)
        ],
        ADD_TASK_ATTACHMENTS: [
            CallbackQueryHandler(add_task_attachments_handler, pattern='^(attach_yes|attach_no|back)$'),
            MessageHandler(Filters.all & ~Filters.command, received_task_attachment)
        ],
        TYPING_TIME: [
            MessageHandler(Filters.text & ~Filters.command, received_time),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ],
        CONFIRMING: [
            CallbackQueryHandler(confirm_task, pattern='^(conf_confirm_yes|conf_confirm_no|conf_back)$')
        ],
        SELECT_DAY: [
            CallbackQueryHandler(select_schedule_day, pattern='^(schedule_add|schedule_reset|schedule_Monday|schedule_Tuesday|schedule_Wednesday|schedule_Thursday|schedule_Friday|schedule_Saturday|schedule_Sunday|back)$')
        ],
        SELECT_TIME_OF_DAY: [
            CallbackQueryHandler(select_schedule_time_of_day, pattern='^(schedule_time_Morning|schedule_time_Afternoon|schedule_time_Evening|schedule_time_CustomTime|back)$')
        ],
        SET_SCHEDULE_HOUR: [
            MessageHandler(Filters.text & ~Filters.command, set_schedule_hour),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ],
        SAVE_SCHEDULE: [
            CallbackQueryHandler(save_schedule, pattern='^schedule_save$'),
            CallbackQueryHandler(reset_schedule, pattern='^schedule_reset$'),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ],
        QUICK_NOTE: [
            MessageHandler(Filters.text & ~Filters.command, quick_note_handler),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ],
        QUICK_NOTE_CONFIRM: [
            CallbackQueryHandler(handle_quick_note_confirmation, pattern='^(quick_confirm_yes|quick_confirm_no|back)$')
        ],
        QUICK_NOTE_TIME: [
            MessageHandler(Filters.text & ~Filters.command, quick_note_time_handler),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ],
        SETTINGS: [
            CallbackQueryHandler(settings_menu_handler, pattern='^(set_notification_time|back)$')
        ],
        SET_NOTIFICATION_TIME: [
            MessageHandler(Filters.text & ~Filters.command, set_notification_time),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ],
        SUBSCRIPTION_CATEGORY: [
            CallbackQueryHandler(subscription_category_handler, pattern='^(subscription_Sport|subscription_Study|subscription_Rest|subscription_Personal|back)$')
        ],
        VIEW_SUBSCRIPTION: [
            CallbackQueryHandler(view_subscriptions, pattern='^(view_subscriptions|add_subscription|back)$')
        ],
        SUBSCRIPTION_CATEGORY: [
            CallbackQueryHandler(subscription_category_handler, pattern='^(subscription_Sport|subscription_Study|subscription_Rest|subscription_Personal|back)$')
        ],
        ADD_SUBSCRIPTION: [
            MessageHandler(Filters.all & ~Filters.command, add_subscription_entry),
            CallbackQueryHandler(button_handler, pattern='^back$')
        ]
    }

def subscription_category_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    category = data.split('_')[1]  # 'subscription_Sport' -> 'Sport'
    context.user_data['subscription_category'] = category
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {category}")

    keyboard = [
        [InlineKeyboardButton('üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫', callback_data='view_subscriptions')],
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_subscription')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text(f'üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        query.message.reply_text(f'üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return VIEW_SUBSCRIPTION

def view_subscriptions(update: Update, context: CallbackContext):
    query = update.callback_query
    category = context.user_data.get('subscription_category')
    user_id = context.user_data.get('user_id')

    cursor.execute('SELECT content FROM subscriptions WHERE user_id = ? AND category = ?', (user_id, category))
    subs = cursor.fetchall()
    if subs:
        message = f'üìå <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":</b>\n\n'
        for sub in subs:
            message += f"‚Ä¢ {sub[0]}\n"
    else:
        message = f'üìå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".'

    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_subscription')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        query.message.reply_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    return VIEW_SUBSCRIPTION

def settings_menu_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    if data == 'set_notification_time':
        try:
            query.edit_message_text('‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö:', reply_markup=back_button())
            logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            query.message.reply_text('‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö:', reply_markup=back_button())
        return SET_NOTIFICATION_TIME
    elif data == 'back':
        return main_menu(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback_data –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {data}")
        return SETTINGS

def my_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = context.user_data.get('user_id')

    cursor.execute('SELECT topic, description, attachments, time FROM tasks WHERE user_id = ? ORDER BY time', (user_id,))
    tasks = cursor.fetchall()
    if tasks:
        message = 'üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n'
        for task in tasks:
            topic, description, attachments, time_str = task
            message += f"‚Ä¢ üìù <b>–¢–æ–ø–∏–∫:</b> {topic}\n  ‚è∞ <b>–í—Ä–µ–º—è:</b> {time_str}\n"
            if attachments:
                message += f"  üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è:</b> {attachments}\n"
            message += "\n"
    else:
        message = 'üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.'

    keyboard = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏: {e}")
        query.message.reply_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    return CHOOSING

def schedule_add_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    pass  # –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤—ã—à–µ –≤ manage_schedule –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö

def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–¥–µ—Å—å
    TOKEN = '8167716193:AAHAYFHZcQ_H8F4mmQazux5nnWWVnv-si3g'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

    global updater
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(button_handler, pattern='^(main_add_task|main_weekly_schedule|main_quick_note|main_settings|main_subscriptions|main_my_tasks)$')
        ],
        states={
            CHOOSING: [
                CallbackQueryHandler(button_handler, pattern='^(main_add_task|main_weekly_schedule|main_quick_note|main_settings|main_subscriptions|main_my_tasks)$')
            ],
            ADD_TASK_TOPIC: [
                MessageHandler(Filters.text & ~Filters.command, add_task_topic)
            ],
            ADD_TASK_ATTACHMENTS: [
                CallbackQueryHandler(add_task_attachments_handler, pattern='^(attach_yes|attach_no|back)$'),
                MessageHandler(Filters.all & ~Filters.command, received_task_attachment)
            ],
            TYPING_TIME: [
                MessageHandler(Filters.text & ~Filters.command, received_time),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ],
            CONFIRMING: [
                CallbackQueryHandler(confirm_task, pattern='^(conf_confirm_yes|conf_confirm_no|conf_back)$')
            ],
            SELECT_DAY: [
                CallbackQueryHandler(select_schedule_day, pattern='^(schedule_add|schedule_reset|schedule_Monday|schedule_Tuesday|schedule_Wednesday|schedule_Thursday|schedule_Friday|schedule_Saturday|schedule_Sunday|back)$')
            ],
            SELECT_TIME_OF_DAY: [
                CallbackQueryHandler(select_schedule_time_of_day, pattern='^(schedule_time_Morning|schedule_time_Afternoon|schedule_time_Evening|schedule_time_CustomTime|back)$')
            ],
            SET_SCHEDULE_HOUR: [
                MessageHandler(Filters.text & ~Filters.command, set_schedule_hour),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ],
            SAVE_SCHEDULE: [
                CallbackQueryHandler(save_schedule, pattern='^schedule_save$'),
                CallbackQueryHandler(reset_schedule, pattern='^schedule_reset$'),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ],
            QUICK_NOTE: [
                MessageHandler(Filters.text & ~Filters.command, quick_note_handler),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ],
            QUICK_NOTE_CONFIRM: [
                CallbackQueryHandler(handle_quick_note_confirmation, pattern='^(quick_confirm_yes|quick_confirm_no|back)$')
            ],
            QUICK_NOTE_TIME: [
                MessageHandler(Filters.text & ~Filters.command, quick_note_time_handler),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ],
            SETTINGS: [
                CallbackQueryHandler(settings_menu_handler, pattern='^(set_notification_time|back)$')
            ],
            SET_NOTIFICATION_TIME: [
                MessageHandler(Filters.text & ~Filters.command, set_notification_time),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ],
            SUBSCRIPTION_CATEGORY: [
                CallbackQueryHandler(subscription_category_handler, pattern='^(subscription_Sport|subscription_Study|subscription_Rest|subscription_Personal|back)$')
            ],
            VIEW_SUBSCRIPTION: [
                CallbackQueryHandler(view_subscriptions, pattern='^(view_subscriptions|add_subscription|back)$')
            ],
            ADD_SUBSCRIPTION: [
                MessageHandler(Filters.all & ~Filters.command, add_subscription_entry),
                CallbackQueryHandler(button_handler, pattern='^back$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    dp.add_handler(conv_handler)

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å.")
    updater.idle()

if __name__ == '__main__':
    main()
